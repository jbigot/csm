// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CorbaMandelbrot_hh__
#define __CorbaMandelbrot_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE cmandelbrot

_CORBA_MODULE_BEG

  class area_t_var;

  class area_t : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
  public:
    typedef area_t_var _var_type;
    inline area_t() {}
    inline area_t(const area_t& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

    inline area_t(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
    inline area_t(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline area_t& operator = (const area_t& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class area_t_out;

  class area_t_var {
  public:
    inline area_t_var() : _pd_seq(0) {}
    inline area_t_var(area_t* _s) : _pd_seq(_s) {}
    inline area_t_var(const area_t_var& _s) {
      if (_s._pd_seq)  _pd_seq = new area_t(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~area_t_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline area_t_var& operator = (area_t* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline area_t_var& operator = (const area_t_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new area_t;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline area_t* operator -> () { return _pd_seq; }
    inline const area_t* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator area_t& () const { return *_pd_seq; }
#else
    inline operator const area_t& () const { return *_pd_seq; }
    inline operator area_t& () { return *_pd_seq; }
#endif
      
    inline const area_t& in() const { return *_pd_seq; }
    inline area_t&       inout()    { return *_pd_seq; }
    inline area_t*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline area_t* _retn() { area_t* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class area_t_out;
    
  private:
    area_t* _pd_seq;
  };

  class area_t_out {
  public:
    inline area_t_out(area_t*& _s) : _data(_s) { _data = 0; }
    inline area_t_out(area_t_var& _s)
      : _data(_s._pd_seq) { _s = (area_t*) 0; }
    inline area_t_out(const area_t_out& _s) : _data(_s._data) {}
    inline area_t_out& operator = (const area_t_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline area_t_out& operator = (area_t* _s) {
      _data = _s;
      return *this;
    }
    inline operator area_t*&()  { return _data; }
    inline area_t*& ptr()       { return _data; }
    inline area_t* operator->() { return _data; }

    inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    area_t*& _data;

  private:
    area_t_out();
    area_t_out& operator=(const area_t_var&);
  };

  class dataULong_t_var;

  class dataULong_t : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
  public:
    typedef dataULong_t_var _var_type;
    inline dataULong_t() {}
    inline dataULong_t(const dataULong_t& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

    inline dataULong_t(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
    inline dataULong_t(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline dataULong_t& operator = (const dataULong_t& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class dataULong_t_out;

  class dataULong_t_var {
  public:
    inline dataULong_t_var() : _pd_seq(0) {}
    inline dataULong_t_var(dataULong_t* _s) : _pd_seq(_s) {}
    inline dataULong_t_var(const dataULong_t_var& _s) {
      if (_s._pd_seq)  _pd_seq = new dataULong_t(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~dataULong_t_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline dataULong_t_var& operator = (dataULong_t* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline dataULong_t_var& operator = (const dataULong_t_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new dataULong_t;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline dataULong_t* operator -> () { return _pd_seq; }
    inline const dataULong_t* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator dataULong_t& () const { return *_pd_seq; }
#else
    inline operator const dataULong_t& () const { return *_pd_seq; }
    inline operator dataULong_t& () { return *_pd_seq; }
#endif
      
    inline const dataULong_t& in() const { return *_pd_seq; }
    inline dataULong_t&       inout()    { return *_pd_seq; }
    inline dataULong_t*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline dataULong_t* _retn() { dataULong_t* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class dataULong_t_out;
    
  private:
    dataULong_t* _pd_seq;
  };

  class dataULong_t_out {
  public:
    inline dataULong_t_out(dataULong_t*& _s) : _data(_s) { _data = 0; }
    inline dataULong_t_out(dataULong_t_var& _s)
      : _data(_s._pd_seq) { _s = (dataULong_t*) 0; }
    inline dataULong_t_out(const dataULong_t_out& _s) : _data(_s._data) {}
    inline dataULong_t_out& operator = (const dataULong_t_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline dataULong_t_out& operator = (dataULong_t* _s) {
      _data = _s;
      return *this;
    }
    inline operator dataULong_t*&()  { return _data; }
    inline dataULong_t*& ptr()       { return _data; }
    inline dataULong_t* operator->() { return _data; }

    inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    dataULong_t*& _data;

  private:
    dataULong_t_out();
    dataULong_t_out& operator=(const dataULong_t_var&);
  };

#ifndef __cmandelbrot_mMandelbrotManagement__
#define __cmandelbrot_mMandelbrotManagement__
  class MandelbrotManagement;
  class _objref_MandelbrotManagement;
  class _impl_MandelbrotManagement;
  
  typedef _objref_MandelbrotManagement* MandelbrotManagement_ptr;
  typedef MandelbrotManagement_ptr MandelbrotManagementRef;

  class MandelbrotManagement_Helper {
  public:
    typedef MandelbrotManagement_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_MandelbrotManagement, MandelbrotManagement_Helper> MandelbrotManagement_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_MandelbrotManagement,MandelbrotManagement_Helper > MandelbrotManagement_out;

#endif

  // interface MandelbrotManagement
  class MandelbrotManagement {
  public:
    // Declarations for this interface type.
    typedef MandelbrotManagement_ptr _ptr_type;
    typedef MandelbrotManagement_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_MandelbrotManagement :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void dump();
    void get_info(::cmandelbrot::dataULong_t_out data, ::cmandelbrot::area_t_out area, ::CORBA::ULong& nx, ::CORBA::ULong& ny);
    void compute();

    // Constructors
    inline _objref_MandelbrotManagement()  { _PR_setobj(0); }  // nil
    _objref_MandelbrotManagement(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_MandelbrotManagement();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_MandelbrotManagement(const _objref_MandelbrotManagement&);
    _objref_MandelbrotManagement& operator = (const _objref_MandelbrotManagement&);
    // not implemented

    friend class MandelbrotManagement;
  };

  class _pof_MandelbrotManagement : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_MandelbrotManagement() : _OMNI_NS(proxyObjectFactory)(MandelbrotManagement::_PD_repoId) {}
    virtual ~_pof_MandelbrotManagement();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_MandelbrotManagement :
    public virtual omniServant
  {
  public:
    virtual ~_impl_MandelbrotManagement();

    virtual void dump() = 0;
    virtual void get_info(::cmandelbrot::dataULong_t_out data, ::cmandelbrot::area_t_out area, ::CORBA::ULong& nx, ::CORBA::ULong& ny) = 0;
    virtual void compute() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_cmandelbrot
_CORBA_MODULE_BEG

  class MandelbrotManagement :
    public virtual cmandelbrot::_impl_MandelbrotManagement,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~MandelbrotManagement();

    inline ::cmandelbrot::MandelbrotManagement_ptr _this() {
      return (::cmandelbrot::MandelbrotManagement_ptr) _do_this(::cmandelbrot::MandelbrotManagement::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_cmandelbrot
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
cmandelbrot::MandelbrotManagement::_marshalObjRef(::cmandelbrot::MandelbrotManagement_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CorbaMandelbrot
#endif

#endif  // __CorbaMandelbrot_hh__

