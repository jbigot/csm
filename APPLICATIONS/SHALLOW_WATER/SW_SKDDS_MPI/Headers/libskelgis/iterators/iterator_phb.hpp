#ifndef ITERATOR_PHB_H
#define ITERATOR_PHB_H

namespace skelgis{

  //===============================================================================
  //-------------------------------------------------------------------------------
  template<class T,int R> struct iterator_phb_left
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_phb_left():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_phb_left(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_phb_left(const iterator_phb_left<T,R>& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_phb_left(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator_phb_left<T,R>& operator++()
    //-------------------------------------------------------------------------------
    {
      if((_rank+1)%_width%R==0)
	_rank = _rank+_width-(R-1);
      else
	++_rank;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator_phb_left<T,R>& operator++(int)
    //-------------------------------------------------------------------------------
    {
      iterator_phb_left<T,R> _tmp = *this;
      if((_rank+1)%_width%R==0)
	_rank = _rank+_width-(R-1);
      else
	++_rank;
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline iterator_phb_left<T,R>& operator=(iterator_phb_left<T,R> right)
    //-------------------------------------------------------------------------------
    {
      this->_rank = right._rank;
      this->_width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_phb_left<T,R> & toTest) {return this->_rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_phb_left<T,R>& toTest) {return this->_rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_phb_left<T,R>& toComp) {return this->_rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_phb_left<T,R>& toComp) {return this->_rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_phb_left<T,R>& toComp) {return this->_rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_phb_left<T,R>& toComp) {return this->_rank>toComp._rank;}
    //-------------------------------------------------------------------------------
  };

  //-------------------------------------------------------------------------------
  template<class T> struct iterator_phb_left<T,0>{};
  //-------------------------------------------------------------------------------

  //===============================================================================
  //-------------------------------------------------------------------------------
  template<class T,int R> struct iterator_phb_up
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_phb_up():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_phb_up(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_phb_up(const iterator_phb_up<T,R>& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_phb_up(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator_phb_up<T,R>& operator++()
    //-------------------------------------------------------------------------------
    {
      if((_rank+1)%_width<(_width-R))
	++_rank;
      else
	_rank = _rank+2*R+1;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator_phb_up<T,R>& operator++(int)
    //-------------------------------------------------------------------------------
    {
      iterator_cont<T,R> _tmp = *this;
      if((_rank+1)%_width<(_width-R))
	++_rank;
      else
	_rank = _rank+2*R+1;
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline iterator_phb_up<T,R>& operator=(iterator_phb_up<T,R> right)
    //-------------------------------------------------------------------------------
    {
      this->_rank = right._rank;
      this->_width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_phb_up<T,R> & toTest) {return this->_rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_phb_up<T,R>& toTest) {return this->_rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_phb_up<T,R>& toComp) {return this->_rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_phb_up<T,R>& toComp) {return this->_rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_phb_up<T,R>& toComp) {return this->_rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_phb_up<T,R>& toComp) {return this->_rank>toComp._rank;}
    //-------------------------------------------------------------------------------
  };

  //-------------------------------------------------------------------------------
  template<class T> struct iterator_phb_up<T,0>{};
  //-------------------------------------------------------------------------------

  //===============================================================================
  //-------------------------------------------------------------------------------
  template<class T,int R> struct iterator_phb_right
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_phb_right():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_phb_right(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_phb_right(const iterator_phb_right<T,R>& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_phb_right(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator_phb_right<T,R>& operator++()
    //-------------------------------------------------------------------------------
    {
      if((_rank+1-_width+R)%_width%R==0)
	_rank = _rank+_width-(R-1);
      else
	++_rank;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator_phb_right<T,R>& operator++(int)
    //-------------------------------------------------------------------------------
    {
      iterator_cont<T,R> _tmp = *this;
      if((_rank+1-_width+R)%_width%R<=(R-1))
	++_rank;
      else
	_rank = _rank+_width-(R-1);
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline iterator_phb_right<T,R>& operator=(iterator_phb_right<T,R> & right)
    //-------------------------------------------------------------------------------
    {
      this->_rank = right._rank;
      this->_width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_phb_right<T,R> & toTest) {return this->_rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_phb_right<T,R>& toTest) {return this->_rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_phb_right<T,R>& toComp) {return this->_rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_phb_right<T,R>& toComp) {return this->_rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_phb_right<T,R>& toComp) {return this->_rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_phb_right<T,R>& toComp) {return this->_rank>toComp._rank;}
    //-------------------------------------------------------------------------------
  };

  //-------------------------------------------------------------------------------
  template<class T> struct iterator_phb_right<T,0>{};
  //-------------------------------------------------------------------------------
  

  //===============================================================================
  //-------------------------------------------------------------------------------
  template<class T,int R> struct iterator_phb_down
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_phb_down():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_phb_down(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_phb_down(const iterator_phb_down<T,R>& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_phb_down(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator_phb_down<T,R>& operator++()
    //-------------------------------------------------------------------------------
    {
      if((_rank+1)%_width<(_width-R))
	++_rank;
      else
	_rank = _rank+2*R+1;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator_phb_down<T,R>& operator++(int)
    //-------------------------------------------------------------------------------
    {
      iterator_cont<T,R> _tmp = *this;
      if((_rank+1)%_width<(_width-R))
	++_rank;
      else
	_rank = _rank+2*R+1;
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline iterator_phb_down<T,R>& operator=(iterator_phb_down<T,R> & right)
    //-------------------------------------------------------------------------------
    {
      this->_rank = right._rank;
      this->_width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_phb_down<T,R> & toTest) {return this->_rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_phb_down<T,R>& toTest) {return this->_rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_phb_down<T,R>& toComp) {return this->_rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_phb_down<T,R>& toComp) {return this->_rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_phb_down<T,R>& toComp) {return this->_rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_phb_down<T,R>& toComp) {return this->_rank>toComp._rank;}
    //-------------------------------------------------------------------------------
  };

  //-------------------------------------------------------------------------------
  template<class T> struct iterator_phb_down<T,0>{};
  //-------------------------------------------------------------------------------
  

}

#endif
