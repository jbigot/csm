#ifndef ITERATOR_LINE_H
#define ITERATOR_LINE_H

#include "iterator_cont.hpp"
#include "iterator.hpp"

namespace skelgis{

  //-------------------------------------------------------------------------------
  template<class T,int R> struct iterator_line
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_line():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_line(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_line(const iterator_line& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_line(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator_line& operator++()
    //-------------------------------------------------------------------------------
    {
      _rank = _rank + _width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    iterator_line& operator++(int)
    //-------------------------------------------------------------------------------
    {
      iterator_line<T,R> _tmp = *this;
      _rank = _rank + _width;
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    iterator_line& operator--()
    //-------------------------------------------------------------------------------
    {
      _rank = _rank - _width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    iterator_line& operator--(int)
    //-------------------------------------------------------------------------------
    {
      iterator_line<T,R> _tmp = *this;
      _rank = _rank - _width;
      return _tmp;
    }
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline iterator_line& operator=(iterator_line right)
    //-------------------------------------------------------------------------------
    {
      _rank = right._rank;
      _width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_line & toTest) {return _rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_line & toTest) {return _rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_line & toComp) {return _rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_line & toComp) {return _rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_line & toComp) {return _rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_line & toComp) {return _rank>toComp._rank;}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline iterator<T,R> begin(){return iterator<T,R>(_rank,_width);}
    //-------------------------------------------------------------------------------
    inline iterator_cont<T,R> begin_cont(){return iterator_cont<T,R>(_rank,_width);}
    //-------------------------------------------------------------------------------
    inline iterator<T,R> end(){return iterator<T,R>(_rank+_width-2*R-1,_width);}
    //-------------------------------------------------------------------------------
    inline iterator_cont<T,R> end_cont(){return iterator_cont<T,R>(_rank+_width-2*R-1,_width);}
    //-------------------------------------------------------------------------------
  };
  //-------------------------------------------------------------------------------

  //-------------------------------------------------------------------------------
  template<class T> struct iterator_line<T,0>
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_line():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_line(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_line(const iterator_line& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_line(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator_line& operator++()
    //-------------------------------------------------------------------------------
    {
      _rank = _rank + _width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    iterator_line& operator++(int)
    //-------------------------------------------------------------------------------
    {
      iterator_line<T,0> _tmp = *this;
      _rank = _rank + _width;
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    iterator_line& operator--()
    //-------------------------------------------------------------------------------
    {
      _rank = _rank - _width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    iterator_line& operator--(int)
    //-------------------------------------------------------------------------------
    {
      iterator_line<T,0> _tmp = *this;
      _rank = _rank - _width;
      return _tmp;
    }
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline iterator_line& operator=(iterator_line right)
    //-------------------------------------------------------------------------------
    {
      _rank = right._rank;
      _width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_line & toTest) {return _rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_line & toTest) {return _rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_line & toComp) {return _rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_line & toComp) {return _rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_line & toComp) {return _rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_line & toComp) {return _rank>toComp._rank;}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline iterator<T,0> begin(){return iterator<T,0>(_rank,_width);}
    //-------------------------------------------------------------------------------
    inline iterator_cont<T,0> begin_cont(){return iterator_cont<T,0>(_rank,_width);}
    //-------------------------------------------------------------------------------
    inline iterator<T,0> end(){return iterator<T,0>(_rank+_width-1,_width);}
    //-------------------------------------------------------------------------------
    inline iterator_cont<T,0> end_cont(){return iterator_cont<T,0>(_rank+_width-1,_width);}
    //-------------------------------------------------------------------------------
  };
  //-------------------------------------------------------------------------------

}

#endif
