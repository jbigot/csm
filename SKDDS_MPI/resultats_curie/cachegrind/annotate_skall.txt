--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         20971520 B, 64 B, 20-way associative
Command:          ../../../bin/FullSWOF_2D
Data file:        cachegrind.out.118275
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
            Ir    I1mr   ILmr            Dr        D1mr        DLmr            Dw        D1mw        DLmw 
--------------------------------------------------------------------------------
22,177,724,806 154,981 14,759 6,068,193,711 788,868,762 293,957,925 2,659,069,881 427,366,177 375,153,179  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir   I1mr  ILmr            Dr        D1mr        DLmr          Dw        D1mw        DLmw  file:function
--------------------------------------------------------------------------------
6,000,770,312     48    48 2,550,580,098 574,025,502 131,277,698 250,090,100  63,935,930  18,755,000  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/scheme_parallel.hpp:_ApplyList_bloc2_f::operator()(skelgis::DMatrix_vector<double, 2, false>&, skelgis::DMatrix_vector<double, 0, false>&) const
5,150,250,442     91    91 1,550,190,066  75,507,882  25,040,182 400,010,090  50,516,596  49,990,002  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/order2_parallel.hpp:_ApplyList_order2_huv2_f::operator()(skelgis::DMatrix_vector<double, 2, false>&, skelgis::DMatrix_vector<double, 0, false>&) const
4,650,270,464     77    77   850,660,100  25,440,004  25,015,878 399,920,152  56,445,298  50,010,000  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/order2_parallel.hpp:_ApplyList_order2_huv1_f::operator()(skelgis::DMatrix_vector<double, 2, false>&, skelgis::DMatrix_vector<double, 0, false>&) const
1,650,640,176     18    18   250,290,082  18,793,764  18,753,756 250,050,042  31,256,250  31,256,250  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/scheme_parallel.hpp:_ApplyList_bloc1y_f::operator()(skelgis::DMatrix_vector<double, 0, false>&, skelgis::DMatrix_vector<double, 0, false>&) const
1,650,640,114     15    15   250,290,034  18,794,844  18,753,758 250,050,042  31,258,426  31,256,250  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/scheme_parallel.hpp:_ApplyList_bloc1x_f::operator()(skelgis::DMatrix_vector<double, 0, false>&, skelgis::DMatrix_vector<double, 0, false>&) const
  863,043,519  1,182    40         1,677         972         195 575,353,537 143,837,499 143,835,673  ???:__GI_memset
  650,140,068     10    10    50,020,018   6,265,004   6,255,004 250,000,016  25,010,000  25,010,000  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/scheme_parallel.hpp:_ApplyList_ve_ca_f::operator()(skelgis::DMatrix_vector<double, 0, false>&, skelgis::DMatrix_vector<double, 2, false>&) const
  550,805,220      7     7   200,200,040  25,035,008  25,005,004 100,020,044  12,502,500  12,502,500  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/order2_parallel.hpp:_ApplyBinary_order2_delz_f::operator()(skelgis::DMatrix<double, 0, false>&, skelgis::DMatrix<double, 0, false>&, skelgis::DMatrix<double, 0, false>&) const
  400,070,034      5     5   150,015,009  18,760,002  18,755,002  75,000,009           0           0  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/order2_parallel.hpp:_ApplyList_Heun_hq_f::operator()(skelgis::DMatrix_vector<double, 0, false>&, skelgis::DMatrix_vector<double, 2, false>&) const
  275,350,078     11    11   100,070,014  12,522,502  12,502,502  50,000,024   6,250,000   6,250,000  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/order2_parallel.hpp:_ApplyBinary_order2_delzc1_f::operator()(skelgis::DMatrix<double, 0, false>&, skelgis::DMatrix<double, 0, false>&, skelgis::DMatrix<double, 0, false>&) const
  275,350,078     10    10   100,070,014  12,520,002  12,500,002  50,000,022   6,250,000   6,250,000  /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/order2_parallel.hpp:_ApplyBinary_order2_delzc2_f::operator()(skelgis::DMatrix<double, 0, false>&, skelgis::DMatrix<double, 0, false>&, skelgis::DMatrix<double, 0, false>&) const

--------------------------------------------------------------------------------
-- Auto-annotated source: /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/scheme_parallel.hpp
--------------------------------------------------------------------------------
         Ir I1mr ILmr          Dr        D1mr       DLmr         Dw       D1mw      DLmw 

          .    .    .           .           .          .          .          .         .  #ifndef SCHEME_PARALLEL_H
          .    .    .           .           .          .          .          .         .  #define SCHEME_PARALLEL_H
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  #include "scheme.hpp"
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  //BLOC1x
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
         15    1    1           0           0          0         13          0         0  BEGINApplyListBlock(bloc1x_f,inputs,SCALAR,0,outputs,SCALAR,0)
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  {
          .    .    .           .           .          .          .          .         .    //std::cout<<"BLOC1 X------------"<<std::endl;
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    TAB0 h1l(inputs[0]);
          .    .    .           .           .          .          .          .         .    TAB0 h1r(inputs[1]);
          .    .    .           .           .          .          .          .         .    TAB0 u1l(inputs[2]);
          .    .    .           .           .          .          .          .         .    TAB0 u1r(inputs[3]);
-- line 16 ----------------------------------------
-- line 32 ----------------------------------------
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cv1r(v1r.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cdelz1(delz1.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> ch1g(h1g.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> ch1d(h1d.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cf1(f1.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cf2(f2.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cf3(f3.getDMatrix());
          .    .    .           .           .          .          .          .         .  
     20,046    3    3      10,010           0          0         14          0         0      for(int64_t yy = ch1l.start(); yy<ch1l.height();yy++)
          .    .    .           .           .          .          .          .         .      {
100,280,000    1    1     210,000      30,000          0          0          0         0        for(int64_t xx = ch1l.start();xx<ch1l.width(); xx++)
          .    .    .           .           .          .          .          .         .        {
500,100,000    3    3 100,020,000  12,503,044 12,502,500 50,010,000  6,251,250 6,251,250          ch1g(xx,yy)=max(0.,ch1l(xx,yy)-max(0.,cdelz1(xx,yy)));
400,080,034    4    4 100,020,008   6,251,796  6,251,252 50,010,014  6,251,794 6,251,250          ch1d(xx,yy)=max(0.,ch1r(xx,yy)-max(0.,-cdelz1(xx,yy)));
200,040,000    0    0  50,010,000           0          0          0          0         0          if (ch1g(xx,yy)<=0. && ch1d(xx,yy)<=0.)
          .    .    .           .           .          .          .          .         .          {
 50,010,000    1    1           0           0          0 50,010,000  6,251,794 6,251,250            cf1(xx,yy)=0.;
 50,010,000    0    0           0           0          0 50,010,000  6,251,794 6,251,250            cf2(xx,yy)=0.;
100,020,000    0    0           0           0          0 50,010,000  6,251,794 6,251,250            cf3(xx,yy)=0.;
          .    .    .           .           .          .          .          .         .          }
          .    .    .           .           .          .          .          .         .          else
          .    .    .           .           .          .          .          .         .          {
     10,004    1    1      10,002      10,000          2          2          0         0            double c = max(fabs(cu1l(xx,yy))+sqrt(grav*ch1g(xx,yy)),fabs(cu1r(xx,yy))+sqrt(grav*ch1d(xx,yy)));
     20,000    0    0      10,000           0          0          0          0         0            double cd = c*0.5;
          .    .    .           .           .          .          .          .         .            double qd = cu1r(xx,yy)*ch1d(xx,yy);
          .    .    .           .           .          .          .          .         .            double qg = cu1l(xx,yy)*ch1g(xx,yy);
          .    .    .           .           .          .          .          .         .            cf1(xx,yy)=(qg+qd)*0.5-cd*(ch1d(xx,yy)-ch1g(xx,yy));
          .    .    .           .           .          .          .          .         .            cf2(xx,yy)=((cu1l(xx,yy)*qg)+(grav_dem*ch1g(xx,yy)*ch1g(xx,yy))+(cu1r(xx,yy)*qd)+(grav_dem*ch1d(xx,yy)*ch1d(xx,yy)))*0.5-cd*(qd-qg);
250,050,000    1    1           0           0          0          0          0         0            cf3(xx,yy)=(qg*cv1l(xx,yy)+qd*cv1r(xx,yy))*0.5-cd*(ch1d(xx,yy)*cv1r(xx,yy)-ch1g(xx,yy)*cv1l(xx,yy));
          .    .    .           .           .          .          .          .         .          }
          .    .    .           .           .          .          .          .         .        }
          .    .    .           .           .          .          .          .         .      }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    //iTAB0 it = h1l.begin();
          .    .    .           .           .          .          .          .         .    //iTAB0 itEnd = h1l.end();
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // parameters * par = parameters::getSingleton();
-- line 68 ----------------------------------------
-- line 82 ----------------------------------------
          .    .    .           .           .          .          .          .         .    //   f2[it]=flux_num->get_f2();
          .    .    .           .           .          .          .          .         .    //   f3[it]=flux_num->get_f3();
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    //   cfl=max(cfl,flux_num->get_cfl());
          .    .    .           .           .          .          .          .         .    // }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // if(cfl*tx>cfl_fix)
          .    .    .           .           .          .          .          .         .    //   std::cout<<"cfl conditioin is not satisfied in x"<<std::endl;
         16    0    0          14           4          4          0          0         0  }
          .    .    .           .           .          .          .          .         .  END(bloc1x_f);
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  //BLOC1y
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
         15    0    0           0           0          0         13          0         0  BEGINApplyListBlock(bloc1y_f,inputs,SCALAR,0,outputs,SCALAR,0)
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  {
          .    .    .           .           .          .          .          .         .    //std::cout<<"BLOC1 Y------------"<<std::endl;
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    TAB0 h2l(inputs[0]);
          .    .    .           .           .          .          .          .         .    TAB0 h2r(inputs[1]);
          .    .    .           .           .          .          .          .         .    TAB0 u2l(inputs[2]);
          .    .    .           .           .          .          .          .         .    TAB0 u2r(inputs[3]);
-- line 104 ----------------------------------------
-- line 120 ----------------------------------------
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cv2r(v2r.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cdelz2(delz2.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> ch2g(h2g.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> ch2d(h2d.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cg1(g1.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cg2(g2.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cg3(g3.getDMatrix()); 
          .    .    .           .           .          .          .          .         .  
     20,050    1    1      10,012           0          0         14          0         0      for(int64_t yy = ch2l.start(); yy<ch2l.height();yy++)
          .    .    .           .           .          .          .          .         .      {
100,280,052    6    6     210,042      30,006          0          0          0         0        for(int64_t xx = ch2l.start();xx<ch2l.width(); xx++)
          .    .    .           .           .          .          .          .         .        {
500,100,000    3    3 100,020,000  12,502,500 12,502,500 50,010,000  6,251,250 6,251,250          ch2g(xx,yy)=max(0.,ch2l(xx,yy)-max(0.,cdelz2(xx,yy)));
400,080,034    5    5 100,020,008   6,251,252  6,251,252 50,010,014  6,251,250 6,251,250          ch2d(xx,yy)=max(0.,ch2r(xx,yy)-max(0.,-cdelz2(xx,yy)));
200,040,000    0    0  50,010,000           0          0          0          0         0          if (ch2g(xx,yy)<=0. && ch2d(xx,yy)<=0.)
          .    .    .           .           .          .          .          .         .          {
 50,010,000    2    2           0           0          0 50,010,000  6,251,250 6,251,250            cg1(xx,yy)=0.;
 50,010,000    0    0           0           0          0 50,010,000  6,251,250 6,251,250            cg2(xx,yy)=0.;
100,020,000    0    0           0           0          0 50,010,000  6,251,250 6,251,250            cg3(xx,yy)=0.;
          .    .    .           .           .          .          .          .         .          }
          .    .    .           .           .          .          .          .         .          else
          .    .    .           .           .          .          .          .         .          {
     10,006    0    0      10,004      10,002          0          2          0         0            double c = max(fabs(cu2l(xx,yy))+sqrt(grav*ch2g(xx,yy)),fabs(cu2r(xx,yy))+sqrt(grav*ch2d(xx,yy)));
     20,004    0    0      10,002           0          0          0          0         0            double cd = c*0.5;
          .    .    .           .           .          .          .          .         .            double qd = cu2r(xx,yy)*ch2d(xx,yy);
          .    .    .           .           .          .          .          .         .            double qg = cu2l(xx,yy)*ch2g(xx,yy);
          .    .    .           .           .          .          .          .         .            cg1(xx,yy)=(qg+qd)*0.5-cd*(ch2d(xx,yy)-ch2g(xx,yy));
          .    .    .           .           .          .          .          .         .            cg2(xx,yy)=((cu2l(xx,yy)*qg)+(grav_dem*ch2g(xx,yy)*ch2g(xx,yy))+(cu2r(xx,yy)*qd)+(grav_dem*ch2d(xx,yy)*ch2d(xx,yy)))*0.5-cd*(qd-qg);
250,050,000    1    1           0           0          0          0          0         0            cg3(xx,yy)=(qg*cv2l(xx,yy)+qd*cv2r(xx,yy))*0.5-cd*(ch2d(xx,yy)*cv2r(xx,yy)-ch2g(xx,yy)*cv2l(xx,yy));
          .    .    .           .           .          .          .          .         .          }
          .    .    .           .           .          .          .          .         .        }
          .    .    .           .           .          .          .          .         .      }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // iTAB0 it = h2l.begin();
          .    .    .           .           .          .          .          .         .    // iTAB0 itEnd = h2l.end();
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // parameters * par = parameters::getSingleton();
-- line 156 ----------------------------------------
-- line 170 ----------------------------------------
          .    .    .           .           .          .          .          .         .    //   g3[it]=flux_num->get_f2();
          .    .    .           .           .          .          .          .         .    //   g2[it]=flux_num->get_f3();
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    //   cfl=max(cfl,flux_num->get_cfl());
          .    .    .           .           .          .          .          .         .    // }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // if(cfl*ty>cfl_fix)
          .    .    .           .           .          .          .          .         .    //   std::cout<<"cfl conditioin is not satisfied in y"<<std::endl;
         16    0    0          14           4          4          0          0         0  }
          .    .    .           .           .          .          .          .         .  END(bloc1y_f);
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  //BLOC2
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
         17    1    1           0           0          0         13          0         0  BEGINApplyListBlock(bloc2_f,inputs,SCALAR,2,outputs,SCALAR,0)
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  {
          .    .    .           .           .          .          .          .         .    TAB he(inputs[0]);
          .    .    .           .           .          .          .          .         .    TAB ve1(inputs[1]);
          .    .    .           .           .          .          .          .         .    TAB ve2(inputs[2]);
          .    .    .           .           .          .          .          .         .    TAB hes(inputs[3]);
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    ve1.getBorders();
-- line 192 ----------------------------------------
-- line 244 ----------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .      double tx=0.005;
          .    .    .           .           .          .          .          .         .      double ty=0.005;
          .    .    .           .           .          .          .          .         .      double dt=0.5;
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .      int64_t yyq=cq1.start();
          .    .    .           .           .          .          .          .         .      int64_t yy1=ch1r.start();
          .    .    .           .           .          .          .          .         .      int64_t yy2=ch2r.start();
     30,280   27   27      20,084           4          2         88          0         0      for(int64_t yy = ch.start(); yy<ch.height();yy++,yyq++,yy1++,yy2++)
          .    .    .           .           .          .          .          .         .      {
          .    .    .           .           .          .          .          .         .        int64_t xxq=cq1.start();
          .    .    .           .           .          .          .          .         .        int64_t xx1=ch1r.start();
          .    .    .           .           .          .          .          .         .        int64_t xx2=ch2r.start();
250,740,000   10   10  50,560,000      49,998          0     90,000          0         0        for(int64_t xx = ch.start();xx<ch.width(); xx++,xxq++,xx1++,xx2++)
          .    .    .           .           .          .          .          .         .        {
650,000,000    2    2 400,000,000  74,438,980 18,757,578 50,000,000  6,255,000 6,255,000          chs(xx,yy) = ch(xx,yy)-tx*(cf1(xx1+1,yy1)-cf1(xx1,yy1))-ty*(cg1(xx2,yy2)-cg1(xx2,yy2+1)) ;//+ cRain(xxq,yyq)*dt;
700,000,000    0    0 350,000,000  68,441,904 18,753,828          0          0         0          cqs1(xxq,yyq) = cq1(xxq,yyq)-tx*(cf2(xx1+1,yy1)-cf2(xx1,yy1)+grav_dem*(ch1d(xx1,yy1)*ch1d(xx1,yy1)-ch1r(xx1,yy1)*ch1r(xx1,yy1)
650,000,000    1    1 300,000,000  72,950,732 25,002,500          0          0         0            +ch1l(xx1+1,yy1)*ch1l(xx1+1,yy1)-ch1g(xx1+1,yy1)*ch1g(xx1+1,yy1)+(ch1r(xx1+1,yy1)+ch1l(xx1+1,yy1))*cdelzc1(xxq,yyq)))
350,000,000    1    1 200,000,000  57,591,946  6,251,250 50,000,000  7,680,930 6,250,000            -ty*(cg2(xx2,yy2)-cg2(xx2,yy2+1));
700,000,000    3    3 400,000,000 116,302,878 18,752,500          0          0         0          cqs2(xxq,yyq)= cq2(xxq,yyq)-tx*(cf3(xx1+1,yy1)-cf3(xx1,yy1))-ty*(cg3(xx2,yy2)-cg3(xx2,yy2+1)+grav_dem*(ch2d(xx2,yy2+1)
850,000,000    0    0 350,000,000 115,206,064 25,000,038          0          0         0            *ch2d(xx2,yy2+1)-ch2r(xx2,yy2+1)*ch2r(xx2,yy2+1)+ch2l(xx2,yy2)*ch2l(xx2,yy2)-ch2g(xx2,yy2)*ch2g(xx2,yy2)+(ch2r(xx2,yy2+1)
250,000,000    0    0 100,000,000  50,000,000  6,250,000 50,000,000 50,000,000 6,250,000            +ch2l(xx2,yy2))*cdelzc2(xxq,yyq)));
750,000,000    1    1 200,000,000  19,042,994 12,510,000 50,000,000          0         0          cqs1(xxq,yyq)= cqs1(xxq,yyq)/(1./*+cmcf(xxq,yyq)*/*sqrt(cu(xx,yy)*cu(xx,yy)+cv(xx,yy)*cv(xx,yy))*dt/(8.*chs(xx,yy)));
850,000,000    1    1 200,000,000           0          0 50,000,000          0         0          cqs2(xxq,yyq)= cqs2(xxq,yyq)/(1./*+cmcf(xxq,yyq)*/*sqrt(cu(xx,yy)*cu(xx,yy)+cv(xx,yy)*cv(xx,yy))*dt/(8.*chs(xx,yy)));
          .    .    .           .           .          .          .          .         .        }
          .    .    .           .           .          .          .          .         .      }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .   //  parameters * par = parameters::getSingleton();
          .    .    .           .           .          .          .          .         .   //  //    choice_friction * fric = choice_friction::getSingleton(par);
          .    .    .           .           .          .          .          .         .   //  SCALAR ty = par->get_dtfix()/par->get_dy();
          .    .    .           .           .          .          .          .         .   //  SCALAR tx = par->get_dtfix()/par->get_dx();
          .    .    .           .           .          .          .          .         .   //  SCALAR dt = par->get_dtfix();
-- line 275 ----------------------------------------
-- line 295 ----------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .   //      for(;it<=itEnd;++it,++itc,++itl,++itr,++itu,++itd)
          .    .    .           .           .          .          .          .         .  	// {
          .    .    .           .           .          .          .          .         .  	//   hes[it] = he[it]-tx*(f1[itr]-f1[itl])-ty*(g1[itu]-g1[itd]);
          .    .    .           .           .          .          .          .         .  	//   qes1[itc] = qe1[itc]-tx*(f2[itr]-f2[itl]+grav_dem*(h1d[itl]*h1d[itl]-h1r[itl]*h1r[itl]+h1l[itr]*h1l[itr]-h1g[itr]*h1g[itr]+(h1r[itl]+h1l[itr])*delzc1[itc]))-ty*(g2[itu]-g2[itd]);
          .    .    .           .           .          .          .          .         .  	//   qes2[itc] = qe2[itc]-tx*(f3[itr]-f3[itl])-ty*(g3[itu]-g3[itd]+grav_dem*(h2d[itd]*h2d[itd]-h2r[itd]*h2r[itd]+h2l[itu]*h2l[itu]-h2g[itu]*h2g[itu]+(h2r[itd]+h2l[itu])*delzc2[itc]));
          .    .    .           .           .          .          .          .         .  	// }
          .    .    .           .           .          .          .          .         .   //    }
         16    1    1          14           2          2          0          0         0  }
          .    .    .           .           .          .          .          .         .  END(bloc2_f);
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  //BUNDARY
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
         15    2    2           0           0          0         13          1         1  BEGINApplyListBlock(boundary_f,inputs,SCALAR,0,outputs,SCALAR,2)
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  {
          .    .    .           .           .          .          .          .         .    TAB he(outputs[0]);
          .    .    .           .           .          .          .          .         .    TAB ve1(outputs[1]);
          .    .    .           .           .          .          .          .         .    TAB ve2(outputs[2]);
          .    .    .           .           .          .          .          .         .    
          .    .    .           .           .          .          .          .         .    ControllerPHBD<double,2,false> ch(he.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBD<double,2,false> cu(ve1.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBD<double,2,false> cv(ve2.getDMatrix());
          .    .    .           .           .          .          .          .         .      
         68    3    3          10           6          2          4          0         0      for(int64_t yy = ch.startHeight(); yy<ch.height();yy++)                                                                                                               
          .    .    .           .           .          .          .          .         .        {
     60,028    0    0           0           0          0          0          0         0         for(int64_t xx = ch.startWidth();xx<ch.width(); xx++)
          .    .    .           .           .          .          .          .         .         {
     40,000    0    0      20,000       2,504        626     20,000      2,502     2,502          ch(xx,yy) = ch(xx,yy-1);
     60,000    1    1      20,000       2,504        626     20,000      2,502     2,502          cu(xx,yy) = -cu(xx,yy-1);
     40,000    0    0      20,000       2,504        626     20,000      2,502     2,502          cv(xx,yy) = cv(xx,yy-1);
          .    .    .           .           .          .          .          .         .         }                                                                                                                                                                                           
          .    .    .           .           .          .          .          .         .        }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    ControllerPHBL<double,2,false> chl(he.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBL<double,2,false> cul(ve1.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBL<double,2,false> cvl(ve2.getDMatrix());
          .    .    .           .           .          .          .          .         .  
     90,006    2    2      70,002           0          0          0          0         0      for(int64_t yy = chl.startHeight(); yy<chl.height();yy++)                                                                                                               
          .    .    .           .           .          .          .          .         .        {
    800,000   11   11     100,000           0          0     50,000          0         0         for(int64_t xx = chl.startWidth();xx<chl.width(); xx++)
          .    .    .           .           .          .          .          .         .         {
     60,018    2    2      20,000      10,000      9,897     20,002          0         0          chl(xx,yy) = chl(xx+1,yy);
     60,092    6    6      20,014      10,002      9,897     20,016          0         0          cul(xx,yy) = -cul(xx+1,yy);
     40,000    0    0      20,000      10,000      9,897     20,000          0         0          cvl(xx,yy) = cvl(xx+1,yy);
          .    .    .           .           .          .          .          .         .         }                                                                                                                                                                                           
          .    .    .           .           .          .          .          .         .        }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    ControllerPHBR<double,2,false> chr(he.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBR<double,2,false> cur(ve1.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBR<double,2,false> cvr(ve2.getDMatrix());
          .    .    .           .           .          .          .          .         .  
     60,038    2    2          14           2          0          0          0         0      for(int64_t yy = chr.startHeight(); yy<chr.height();yy++)                                                                                                               
          .    .    .           .           .          .          .          .         .        {
     90,000    0    0           0           0          0          0          0         0         for(int64_t xx = chr.startWidth();xx<chr.width(); xx++)
          .    .    .           .           .          .          .          .         .         {
     40,000    1    1      20,000      10,000      4,947     20,000          0         0          chr(xx,yy) = chr(xx-1,yy);
     60,000    0    0      20,000      10,000      4,947     20,000          0         0          cur(xx,yy) = -cur(xx-1,yy);
     40,000    0    0      20,000      10,000      4,950     20,000          0         0          cvr(xx,yy) = cvr(xx-1,yy);
          .    .    .           .           .          .          .          .         .         }                                                                                                                                                                                           
          .    .    .           .           .          .          .          .         .        }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    ControllerPHBU<double,2,false> chu(he.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBU<double,2,false> cuu(ve1.getDMatrix());
          .    .    .           .           .          .          .          .         .    ControllerPHBU<double,2,false> cvu(ve2.getDMatrix());
          .    .    .           .           .          .          .          .         .  
         82    4    4          14           6          0          6          2         0      for(int64_t yy = chu.startHeight(); yy<chu.height();yy++)                                                                                                               
          .    .    .           .           .          .          .          .         .        {
     60,048    0    0          12           4          0          0          0         0         for(int64_t xx = chu.startWidth();xx<chu.width(); xx++)
          .    .    .           .           .          .          .          .         .         {
     40,000    0    0      20,000       2,504      2,500     20,000      2,502     1,250          chu(xx,yy) = chu(xx,yy+1);
     60,000    0    0      20,000       2,504      2,500     20,000      2,502     1,250          cuu(xx,yy) = -cuu(xx,yy+1);
     40,000    0    0      20,000       2,504      2,500     20,000      2,502     1,250          cvu(xx,yy) = cvu(xx,yy+1);
          .    .    .           .           .          .          .          .         .         }                                                                                                                                                                                           
          .    .    .           .           .          .          .          .         .         }
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // parameters * par = parameters::getSingleton();
          .    .    .           .           .          .          .          .         .    // choice_condition_left * Lbound = choice_condition_left::getSingleton(par->get_Lbound());
          .    .    .           .           .          .          .          .         .    // choice_condition_right * Rbound = choice_condition_right::getSingleton(par->get_Rbound());
          .    .    .           .           .          .          .          .         .    // choice_condition_bottom * Bbound = choice_condition_bottom::getSingleton(par->get_Bbound());
          .    .    .           .           .          .          .          .         .    // choice_condition_top * Tbound = choice_condition_top::getSingleton(par->get_Tbound());
-- line 376 ----------------------------------------
-- line 422 ----------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // for(;dit<=dit_End;++dit)
          .    .    .           .           .          .          .          .         .    //   {
          .    .    .           .           .          .          .          .         .    //     Bbound->calcul(he.getInUp(dit),ve2.getInUp(dit),ve1.getInUp(dit),bottom_imp_h,bottom_imp_discharge);
          .    .    .           .           .          .          .          .         .    //     he[dit]=Bbound->get_hbound();
          .    .    .           .           .          .          .          .         .    //     ve2[dit]=Bbound->get_unormbound();
          .    .    .           .           .          .          .          .         .    //     ve1[dit]=Bbound->get_utanbound();
          .    .    .           .           .          .          .          .         .    //   }
     10,016    2    2      10,014           4          0          0          0         0  }
          .    .    .           .           .          .          .          .         .  END(boundary_f);
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  //VERIFICATION 0
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
         13    2    2           0           0          0         13          0         0  BEGINApplyListBlock(ve_ca_f,inputs,SCALAR,0,outputs,SCALAR,2)
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  {
          .    .    .           .           .          .          .          .         .    TAB h(outputs[0]);
          .    .    .           .           .          .          .          .         .    TAB u(outputs[1]);
          .    .    .           .           .          .          .          .         .    TAB v(outputs[2]);
          .    .    .           .           .          .          .          .         .    TAB0 q1(inputs[0]);
          .    .    .           .           .          .          .          .         .    TAB0 q2(inputs[1]);
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    Controller<double,2,false> chs(h.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,2,false> cus(u.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,2,false> cvs(v.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cqs1(q1.getDMatrix());
          .    .    .           .           .          .          .          .         .    Controller<double,0,false> cqs2(q2.getDMatrix());
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    int64_t yyq=cqs1.start();
     80,040    4    4      20,002      10,002          2          4          0         0    for(int64_t yy = chs.start(); yy<chs.height();yy++,yyq++)
          .    .    .           .           .          .          .          .         .      {
          .    .    .           .           .          .          .          .         .        int64_t xxq=cqs1.start();
250,060,000    2    2           0           0          0          0          0         0        for(int64_t xx = chs.start();xx<chs.width(); xx++,xxq++)
          .    .    .           .           .          .          .          .         .  	{
150,000,000    2    2  50,000,000   6,255,000  6,255,000          0          0         0  	  if(chs(xx,yy)<he_ca)
          .    .    .           .           .          .          .          .         .  	    {
 50,000,000    0    0           0           0          0 50,000,000          0         0  	      chs(xx,yy)=0.;
 50,000,000    0    0           0           0          0 50,000,000  6,255,000 6,255,000  	      cus(xx,yy)=0.;
 50,000,000    0    0           0           0          0 50,000,000  6,255,000 6,255,000  	      cvs(xx,yy)=0.;
 50,000,000    0    0           0           0          0 50,000,000  6,250,000 6,250,000  	      cqs1(xxq,yyq)=0.;
 50,000,000    0    0           0           0          0 50,000,000  6,250,000 6,250,000  	      cqs2(xxq,yyq)=0.;
          .    .    .           .           .          .          .          .         .  	    }
          .    .    .           .           .          .          .          .         .  	  else
          .    .    .           .           .          .          .          .         .  	    {
          .    .    .           .           .          .          .          .         .  	      cus(xx,yy)=cqs1(xxq,yyq)/chs(xx,yy);
          2    0    0           2           0          0          0          0         0  	      if(fabs(cus(xx,yy))<ve_ca)
          .    .    .           .           .          .          .          .         .  		{
          .    .    .           .           .          .          .          .         .  		  cus(xx,yy)=0.;
          .    .    .           .           .          .          .          .         .  		  cqs1(xxq,yyq)=0.;
          .    .    .           .           .          .          .          .         .  		}
          .    .    .           .           .          .          .          .         .  	      cvs(xx,yy)=cqs2(xxq,yyq)/chs(xx,yy);
          .    .    .           .           .          .          .          .         .  	      if(fabs(cvs(xx,yy))<ve_ca)
          .    .    .           .           .          .          .          .         .  		{
          .    .    .           .           .          .          .          .         .  		  cvs(xx,yy)=0.;
-- line 476 ----------------------------------------
-- line 499 ----------------------------------------
          .    .    .           .           .          .          .          .         .   //      }
          .    .    .           .           .          .          .          .         .   //      v[it_2]=q2[it_0]/h[it_2];
          .    .    .           .           .          .          .          .         .   //      if (fabs(v[it_2])<ve_ca) {
          .    .    .           .           .          .          .          .         .  	// v[it_2]=0.;
          .    .    .           .           .          .          .          .         .  	// q2[it_0]=0.;
          .    .    .           .           .          .          .          .         .   //      }
          .    .    .           .           .          .          .          .         .   //    }
          .    .    .           .           .          .          .          .         .   //  }
         14    0    0          14           2          2          0          0         0  }
          .    .    .           .           .          .          .          .         .  END(ve_ca_f);
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  //UPDATE HQ
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          1    1    1           0           0          0          1          0         0  BEGINApplyListBlock(update_hq_f,inputs,SCALAR,0,outputs,SCALAR,2)
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  {
          .    .    .           .           .          .          .          .         .    // TAB h(outputs[0]);
          .    .    .           .           .          .          .          .         .    // TAB hs(outputs[1]);
          .    .    .           .           .          .          .          .         .    // TAB0 q1(inputs[0]);
          .    .    .           .           .          .          .          .         .    // TAB0 q2(inputs[1]);
          .    .    .           .           .          .          .          .         .    // TAB0 qs1(inputs[2]);
          .    .    .           .           .          .          .          .         .    // TAB0 qs2(inputs[3]);
-- line 521 ----------------------------------------
-- line 530 ----------------------------------------
          .    .    .           .           .          .          .          .         .    //   q2[it_0]=qs2[it_0];
          .    .    .           .           .          .          .          .         .    // }
          .    .    .           .           .          .          .          .         .  }
          .    .    .           .           .          .          .          .         .  END(update_hq_f);
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .  //BOUNDARY Z
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          2    1    1           1           0          0          1          0         0  BEGINApplyUnaryBlock(boundaryz_f,zi,SCALAR,2,z,SCALAR,2)
          .    .    .           .           .          .          .          .         .  //-------------------------------------------------------------------------------
          .    .    .           .           .          .          .          .         .  {
          .    .    .           .           .          .          .          .         .    // iterator_phb_left<SCALAR,2> lit = z.begin_phb_left();
          .    .    .           .           .          .          .          .         .    // iterator_phb_left<SCALAR,2> lit_End = z.end_phb_left();
          .    .    .           .           .          .          .          .         .  
          .    .    .           .           .          .          .          .         .    // iterator_phb_right<SCALAR,2> rit = z.begin_phb_right();
          .    .    .           .           .          .          .          .         .    // iterator_phb_right<SCALAR,2> rit_End = z.end_phb_right();
          .    .    .           .           .          .          .          .         .  
-- line 546 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /ccc/cont003/home/gen7470/coullohe/APPLICATIONS/git/FullSWOFV2_Bloc_control/Sources/libschemes/../../Headers/libschemes/order2_parallel.hpp
--------------------------------------------------------------------------------
           Ir I1mr ILmr          Dr       D1mr       DLmr          Dw       D1mw       DLmw 

            .    .    .           .          .          .           .          .          .  #ifndef ORDER2_PARALLEL_H
            .    .    .           .          .          .           .          .          .  #define ORDER2_PARALLEL_H
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  #include "order2.hpp"
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  double Minmodln(double a, double b)
            .    .    .           .          .          .           .          .          .  {
            .    .    .           .          .          .           .          .          .    double rec;
1,600,000,000   16   16           0          0          0           0          0          0    if(a>=0. && b>=0.)
  750,080,000    2    2           0          0          0           0          0          0      rec=min(a,b);
          212   12   12          64          4          4          18          0          0    else if(a<=0. && b<=0.)
1,100,239,918   29   29     169,934     19,994          0           0          0          0      rec=max(a,b);
            .    .    .           .          .          .           .          .          .    else
            .    .    .           .          .          .           .          .          .      rec=0.;
            .    .    .           .          .          .           .          .          .    return rec;
            .    .    .           .          .          .           .          .          .  }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  //INIT DELZ
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
           25    1    1           0          0          0          25          1          1  BEGINApplyBinaryBlock(order2_delz_f,zl,SCALAR,zr,SCALAR,0,delz,SCALAR,0)
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  {
            .    .    .           .          .          .           .          .          .    //unsigned long long a = rdtsc();
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz1l(zl.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz1r(zr.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cdelz(delz.getDMatrix());
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    //unsigned long long b = rdtsc();
            .    .    .           .          .          .           .          .          .    //std::cout<<"delz control rdtsc = "<<b-a<<std::endl;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    //unsigned long long a2 = rdtsc();
            .    .    .           .          .          .           .          .          .  
      180,118    1    1     100,010     20,004          0          20          0          0    for(int64_t yy = cdelz.start(); yy<cdelz.height();yy++)
      460,046    2    2      20,002          0          0           0          0          0        for(int64_t xx = cdelz.start();xx<cdelz.width(); xx++)
  550,165,004    3    3 200,080,000 25,015,000 25,005,000 100,020,000 12,502,500 12,502,500          cdelz(xx,yy) = cz1r(xx,yy) - cz1l(xx,yy);
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    //unsigned long long b2 = rdtsc();
            .    .    .           .          .          .           .          .          .    //std::cout<<"huvh1l calcul rdtsc = "<<b2-a2<<std::endl;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    // iTAB0 it = delz.begin();
            .    .    .           .          .          .           .          .          .    // iTAB0 it_End = delz.end();
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    // SCALAR delztemp;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    // for(; it<=it_End; ++it) {
            .    .    .           .          .          .           .          .          .    //   delz[it] = zr[it] - zl[it];
            .    .    .           .          .          .           .          .          .    // }
           28    0    0          28          4          4           0          0          0  }
            .    .    .           .          .          .           .          .          .  END(order2_delz_f);
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  //INIT DELZC1
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
           13    1    1           0          0          0          13          0          0  BEGINApplyBinaryBlock(order2_delzc1_f,zl,SCALAR,zr,SCALAR,0,delzc1,SCALAR,0)
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  {
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz1l(zl.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz1r(zr.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cdelzc1(delzc1.getDMatrix());
            .    .    .           .          .          .           .          .          .  
       90,040    7    7      60,000     20,000          0          10          0          0    for(int64_t yy = cdelzc1.start(); yy<cdelzc1.height();yy++)
      240,000    2    2      10,000          0          0           0          0          0        for(int64_t xx = cdelzc1.start();xx<cdelzc1.width(); xx++)
  275,020,012    1    1 100,000,000 12,502,500 12,502,500  50,000,002  6,250,000  6,250,000          cdelzc1(xx,yy) = cz1r(xx+1,yy) - cz1l(xx,yy);    
            .    .    .           .          .          .           .          .          .   //  iTAB0L itc_line = delzc1.begin_line();
            .    .    .           .          .          .           .          .          .   //  iTAB0L itc_line_End = delzc1.end_line();
            .    .    .           .          .          .           .          .          .   //  iTAB0L itl_line = zl.begin_line();
            .    .    .           .          .          .           .          .          .    
            .    .    .           .          .          .           .          .          .   //  for(;itc_line<=itc_line_End;++itc_line,++itl_line)
            .    .    .           .          .          .           .          .          .   //    {
            .    .    .           .          .          .           .          .          .   //      iTAB0 itc = itc_line.begin();
            .    .    .           .          .          .           .          .          .   //      iTAB0 itcEnd = itc_line.end();
            .    .    .           .          .          .           .          .          .   //      iTAB0 itl = itl_line.begin();
            .    .    .           .          .          .           .          .          .   //      iTAB0 itr = itl_line.begin();
            .    .    .           .          .          .           .          .          .   //      ++itr;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .   //      for(;itc<=itcEnd;++itc,++itl,++itr)
            .    .    .           .          .          .           .          .          .  	// delzc1[itc] = zr[itr]-zl[itl];
            .    .    .           .          .          .           .          .          .   //    }
           14    0    0          14          2          2           0          0          0  }
            .    .    .           .          .          .           .          .          .  END(order2_delzc1_f);
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
           13    2    2           0          0          0          13          0          0  BEGINApplyBinaryBlock(order2_delzc2_f,zl,SCALAR,zr,SCALAR,0,delzc2,SCALAR,0)
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  {
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz2l(zl.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz2r(zr.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cdelzc2(delzc2.getDMatrix());
            .    .    .           .          .          .           .          .          .  
       20,052    2    2      10,000          0          0          10          0          0    for(int64_t yy = cdelzc2.start(); yy<cdelzc2.height();yy++)
      250,000    4    4      20,000          0          0           0          0          0      for(int64_t xx = cdelzc2.start();xx<cdelzc2.width(); xx++)
  275,080,000    3    3 100,040,000 12,520,000 12,500,000  50,000,000  6,250,000  6,250,000          cdelzc2(xx,yy) = cz2r(xx,yy) - cz2l(xx,yy+1);
            .    .    .           .          .          .           .          .          .   //  iTAB0L itc_line = delzc2.begin_line();
            .    .    .           .          .          .           .          .          .   //  iTAB0L itc_line_End = delzc2.end_line();
            .    .    .           .          .          .           .          .          .   //  iTAB0L itu_line = zr.begin_line();
            .    .    .           .          .          .           .          .          .   //  iTAB0L itd_line = zl.begin_line();
            .    .    .           .          .          .           .          .          .   //  ++itd_line;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .   //  for(;itc_line<=itc_line_End;++itc_line,++itu_line,++itd_line)
            .    .    .           .          .          .           .          .          .   //    {
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
            .    .    .           .          .          .           .          .          .   //      iTAB0 itc = itc_line.begin();
            .    .    .           .          .          .           .          .          .   //      iTAB0 itcEnd = itc_line.end();
            .    .    .           .          .          .           .          .          .   //      iTAB0 itu = itu_line.begin();
            .    .    .           .          .          .           .          .          .   //      iTAB0 itd = itd_line.begin();
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .   //      for(;itc<=itcEnd;++itc,++itu,++itd)
            .    .    .           .          .          .           .          .          .  	// delzc2[itc] = zr[itu]-zl[itd];
            .    .    .           .          .          .           .          .          .   //    }
           14    0    0          14          2          2           0          0          0  }
            .    .    .           .          .          .           .          .          .  END(order2_delzc2_f);
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  //CACUL huv1
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
           15    4    4           0          0          0          13          0          0  BEGINApplyListBlock(order2_huv1_f,inputs,SCALAR,2,outputs,SCALAR,0)
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  {
            .    .    .           .          .          .           .          .          .    TAB h(inputs[0]);
            .    .    .           .          .          .           .          .          .    TAB u(inputs[1]);
            .    .    .           .          .          .           .          .          .    TAB v(inputs[2]);
            .    .    .           .          .          .           .          .          .    TAB z(inputs[3]);
            .    .    .           .          .          .           .          .          .    TAB0 h1l(outputs[0]);
            .    .    .           .          .          .           .          .          .    TAB0 h1r(outputs[1]);
            .    .    .           .          .          .           .          .          .    TAB0 u1l(outputs[2]);
            .    .    .           .          .          .           .          .          .    TAB0 u1r(outputs[3]);
            .    .    .           .          .          .           .          .          .    TAB0 v1l(outputs[4]);
            .    .    .           .          .          .           .          .          .    TAB0 v1r(outputs[5]);
            .    .    .           .          .          .           .          .          .    TAB0 z1l(outputs[6]);
            .    .    .           .          .          .           .          .          .    TAB0 z1r(outputs[7]);
            .    .    .           .          .          .           .          .          .  
            2    0    0           0          0          0           2          0          0    parameters * par = parameters::getSingleton();
            8    0    0           0          0          0           4          0          0    rec_muscl * rec = rec_muscl::getSingleton(par->get_lim());
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    //unsigned long long a = rdtsc();
            .    .    .           .          .          .           .          .          .    
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> ch(h.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> cu(u.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> cv(v.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> cz(z.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> ch1l(h1l.getDMatrix());
-- line 140 ----------------------------------------
-- line 149 ----------------------------------------
            .    .    .           .          .          .           .          .          .    //unsigned long long b = rdtsc();
            .    .    .           .          .          .           .          .          .    //std::cout<<"huvh1l control rdtsc = "<<b-a<<std::endl;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    //unsigned long long a2 = rdtsc();
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    double dh1,dh2,du1,du2,dv1,dv2,dz1,dz2;
            .    .    .           .          .          .           .          .          .    double hl,ul,vl,zl,hr,ur,vr,zr;
            .    .    .           .          .          .           .          .          .  
            6    2    2           0          0          0           4          0          0    double * hf = new double[4];
            6    0    0           0          0          0           4          0          0    double * uf = new double[4];
            6    0    0           0          0          0           4          0          0    double * vf = new double[4];
            6    0    0           0          0          0           4          0          0    double * zf = new double[4];
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .   
            .    .    .           .          .          .           .          .          .    int64_t yy1 = ch1l.start();
       60,370   18   18      50,078          2          2         112          0          0    for(int64_t yy = ch.start(); yy<ch.height();yy++,yy1++)
            .    .    .           .          .          .           .          .          .    {
            .    .    .           .          .          .           .          .          .      int64_t x = ch.start();
       50,000    1    1      40,000      5,000      4,960           0          0          0      dh1 = ch(x-1,yy)-ch(x-2,yy);
       50,000    1    1      40,000          0          0           0          0          0      du1 = cu(x-1,yy)-cu(x-2,yy);
       50,000    0    0      40,000      5,000      4,957           0          0          0      dv1 = cv(x-1,yy)-cv(x-2,yy);
       50,000    0    0      40,000          0          0           0          0          0      dz1 = cz(x-1,yy)-cz(x-2,yy);
       20,000    0    0      10,000          0          0           0          0          0      dh2 = ch(x,yy)-ch(x-1,yy);
       20,000    1    1      10,000      5,000      4,954           0          0          0      du2 = cu(x,yy)-cu(x-1,yy);
       20,000    0    0      10,000          0          0           0          0          0      dv2 = cv(x,yy)-cv(x-1,yy);
       20,000    0    0      10,000      5,000      5,000           0          0          0      dz2 = cz(x,yy)-cz(x-1,yy);
       10,000    0    0           0          0          0           0          0          0      hl = ch(x-1,yy)+0.5*Minmodln(dh1,dh2);
            .    .    .           .          .          .           .          .          .      hr = ch(x-1,yy)+0.5*Minmodln(dh1,dh2);
       30,000    0    0           0          0          0           0          0          0      ur = cu(x-1,yy)+0.5*Minmodln(du1,du2)*hl/ch(x-1,yy);
       30,000    0    0           0          0          0           0          0          0      vr = cv(x-1,yy)+0.5*Minmodln(dv1,dv2)*hl/ch(x-1,yy);
       50,000    0    0           0          0          0           0          0          0      zr = cz(x-1,yy)+0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
       10,000    0    0           0          0          0           0          0          0      int64_t xx1 = ch1l.start();
  199,990,000    1    1      60,000      9,998          0           0          0          0      for(int64_t xx = ch.start()+1;xx<ch.width()-1; xx++,xx1++)
            .    .    .           .          .          .           .          .          .      {
   49,980,000    2    2           0          0          0  49,980,000  7,009,632  6,247,500        ch1l(xx1,yy1)=hr;
   49,980,000    1    1           0          0          0  49,980,000  7,009,632  6,247,500        cu1l(xx1,yy1)=ur;
   49,980,000    0    0           0          0          0  49,980,000  7,009,632  6,247,500        cv1l(xx1,yy1)=vr;
   49,980,000    0    0           0          0          0  49,980,000  7,009,632  6,247,500        cz1l(xx1,yy1)=zr;
            .    .    .           .          .          .           .          .          .        dh1 = dh2;
            .    .    .           .          .          .           .          .          .        du1 = du2;
            .    .    .           .          .          .           .          .          .        dv1 = dv2;
            .    .    .           .          .          .           .          .          .        dz1 = dz2;
  249,880,000    0    0  99,960,000  6,335,000  6,248,670           0          0          0        dh2 = ch(xx+1,yy)-ch(xx,yy);
  149,930,000    0    0  99,960,000  6,335,000  6,248,663           0          0          0        du2 = cu(xx+1,yy)-cu(xx,yy);
  149,930,000    0    0  99,960,000  6,335,000  6,248,670           0          0          0        dv2 = cv(xx+1,yy)-cv(xx,yy);
   99,960,000    0    0  99,960,000  6,335,000  6,250,000           0          0          0        dz2 = cz(xx+1,yy)-cz(xx,yy);
   99,960,000    0    0           0          0          0           0          0          0        hr = ch(xx,yy)+0.5*Minmodln(dh1,dh2);
   49,980,000    0    0           0          0          0           0          0          0        hl = ch(xx,yy)-0.5*Minmodln(dh1,dh2);
   49,980,000    0    0           0          0          0  49,980,000  7,093,382  6,247,500        ch1r(xx1,yy1)=hl;
  299,880,000    0    0  99,960,000          0          0  49,980,000  7,093,382  6,247,500        cu1r(xx1,yy1)=cu(xx,yy)-0.5*Minmodln(du1,du2)*hr/ch(xx,yy);
  299,880,000    2    2  99,960,000          0          0  49,980,000  7,093,382  6,247,500        cv1r(xx1,yy1)=cv(xx,yy)-0.5*Minmodln(dv1,dv2)*hr/ch(xx,yy);
  649,740,000    2    2  49,980,000          0          0  49,980,000  7,093,186  6,247,500        cz1r(xx1,yy1)=cz(xx,yy)-0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
  299,880,000    0    0  99,960,000          0          0           0          0          0        ur = cu(xx,yy)+0.5*Minmodln(du1,du2)*hl/ch(xx,yy);
  249,900,000    0    0  49,980,000          0          0           0          0          0        vr=cv(xx,yy)+0.5*Minmodln(dv1,dv2)*hl/ch(xx,yy);
   49,980,000    0    0  49,980,000          0          0           0          0          0        zr=cz(xx,yy)+0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .      x = ch.width()-1;
            .    .    .           .          .          .           .          .          .      xx1 = ch1l.width()-1;
       30,000    4    4      20,000     20,000          0      10,000      4,046      3,750      ch1l(xx1,yy1)=hr;
       30,000    0    0      20,000          0          0      10,000      4,046      3,750      cu1l(xx1,yy1)=ur;
       30,000    0    0      20,000          0          0      10,000      4,144      3,750      cv1l(xx1,yy1)=vr;
       30,000    2    2      20,000     10,000          0      10,000      4,144      3,750      cz1l(xx1,yy1)=zr;
            .    .    .           .          .          .           .          .          .      dh1 = dh2;
            .    .    .           .          .          .           .          .          .      du1 = du2;
            .    .    .           .          .          .           .          .          .      dv1 = dv2;
            .    .    .           .          .          .           .          .          .      dz1 = dz2;
       40,000    0    0      20,000          0          0           0          0          0      dh2=ch(x+2,yy)-ch(x+1,yy);
       30,000    0    0      20,000     10,000          0           0          0          0      du2=ch(x+2,yy)-cu(x+1,yy);
       30,000    0    0      20,000          0          0           0          0          0      dv2=ch(x+2,yy)-cv(x+1,yy);
       30,000    2    2      20,000          0          0           0          0          0      dz2=ch(x+2,yy)-cz(x+1,yy);
       40,000    2    2      20,000          0          0      10,000      4,240      3,750      ch1r(xx1,yy1) = ch(x+1,yy)+0.5*Minmodln(dh1,dh2);
       80,000    2    2      50,000          0          0      10,000      4,240      3,750      cu1r(xx1,yy1) = cu(x+1,yy)+0.5*Minmodln(du1,du2)*hl/ch(x+1,yy);
       80,000    0    0      50,000          0          0      10,000      4,240      3,750      cv1r(xx1,yy1) = cv(x+1,yy)+0.5*Minmodln(dv1,dv2)*hl/ch(x+1,yy);
      470,000    9    9     410,000     30,000          0      10,000      4,338      3,750      cz1r(xx1,yy1) = cz(x+1,yy)+0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
            .    .    .           .          .          .           .          .          .    }
            8    1    1           4          2          0           2          0          0    delete [] hf;
            8    0    0           2          0          0           2          0          0    delete [] uf;
            8    0    0           2          0          0           2          0          0    delete [] vf;
            8    1    1           2          0          0           0          0          0    delete [] zf;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    //unsigned long long b2 = rdtsc();
            .    .    .           .          .          .           .          .          .    //std::cout<<"huvh1l calcul rdtsc = "<<b2-a2<<std::endl;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .   //  SCALAR dh1,dh2,du1,du2,dv1,dv2,dz1,dz2;
            .    .    .           .          .          .           .          .          .   //  SCALAR hl,ul,vl,zl,hr,ur,vr,zr;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .   //  SCALAR * hf = new SCALAR[4];
-- line 235 ----------------------------------------
-- line 330 ----------------------------------------
            .    .    .           .          .          .           .          .          .   //      v1r[it_0_End] = vl;
            .    .    .           .          .          .           .          .          .   //      z1r[it_0_End] = zl; 
            .    .    .           .          .          .           .          .          .   //    }
            .    .    .           .          .          .           .          .          .    
            .    .    .           .          .          .           .          .          .   //  delete [] hf;
            .    .    .           .          .          .           .          .          .   //  delete [] uf;
            .    .    .           .          .          .           .          .          .   //  delete [] vf;
            .    .    .           .          .          .           .          .          .   //  delete [] zf;
           14    0    0          12          2          2           0          0          0  }
            .    .    .           .          .          .           .          .          .  END(order2_huv1_f);
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  //CACUL huv2
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
           15    2    2           0          0          0          13          1          1  BEGINApplyListBlock(order2_huv2_f,inputs,SCALAR,2,outputs,SCALAR,0)
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  {
            .    .    .           .          .          .           .          .          .    TAB h(inputs[0]);
            .    .    .           .          .          .           .          .          .    TAB u(inputs[1]);
            .    .    .           .          .          .           .          .          .    TAB v(inputs[2]);
            .    .    .           .          .          .           .          .          .    TAB z(inputs[3]);
            .    .    .           .          .          .           .          .          .    TAB0 h2l(outputs[0]);
            .    .    .           .          .          .           .          .          .    TAB0 h2r(outputs[1]);
            .    .    .           .          .          .           .          .          .    TAB0 u2l(outputs[2]);
            .    .    .           .          .          .           .          .          .    TAB0 u2r(outputs[3]);
            .    .    .           .          .          .           .          .          .    TAB0 v2l(outputs[4]);
            .    .    .           .          .          .           .          .          .    TAB0 v2r(outputs[5]);
            .    .    .           .          .          .           .          .          .    TAB0 z2l(outputs[6]);
            .    .    .           .          .          .           .          .          .    TAB0 z2r(outputs[7]);
            .    .    .           .          .          .           .          .          .  
            2    0    0           0          0          0           2          0          0    parameters * par = parameters::getSingleton();
            8    2    2           0          0          0           4          0          0    rec_muscl * rec = rec_muscl::getSingleton(par->get_lim());
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> ch(h.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> cu(u.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> cv(v.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> cz(z.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> ch2l(h2l.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> ch2r(h2r.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cu2l(u2l.getDMatrix());
-- line 369 ----------------------------------------
-- line 371 ----------------------------------------
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cv2l(v2l.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cv2r(v2r.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz2l(z2l.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cz2r(z2r.getDMatrix());
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      double dh1,dh2,du1,du2,dv1,dv2,dz1,dz2;
            .    .    .           .          .          .           .          .          .      double hl,ul,vl,zl,hr,ur,vr,zr;
            .    .    .           .          .          .           .          .          .  
            6    0    0           0          0          0           4          0          0      double * hf = new double[4];
            6    2    2           0          0          0           4          0          0      double * uf = new double[4];
            6    0    0           0          0          0           4          0          0      double * vf = new double[4];
            6    0    0           0          0          0           4          0          0      double * zf = new double[4];
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      //first line
            .    .    .           .          .          .           .          .          .      int64_t y = ch.start();
            .    .    .           .          .          .           .          .          .      int64_t yy2 = ch2r.start();
            .    .    .           .          .          .           .          .          .      int64_t xx2 = ch2r.start();
       30,028    2    2      10,014          0          0           0          0          0      for(int64_t xx = ch.start();xx<ch.width(); xx++,xx2++)
            .    .    .           .          .          .           .          .          .      {
       30,000    1    1      20,000      2,504      2,504           0          0          0        dh1 = ch(xx,y-1)-ch(xx,y);
       30,000    0    0      20,000      2,504      2,504           0          0          0        du1 = cu(xx,y-1)-cu(xx,y);
       30,000    0    0      20,000      2,504      2,504           0          0          0        dv1 = cv(xx,y-1)-cv(xx,y);
       30,000    2    2      20,000      2,504      2,504           0          0          0        dz1 = cz(xx,y-1)-cz(xx,y);
       20,000    0    0      10,000      1,352      1,250           0          0          0        dh2 = ch(xx,y-2)-ch(xx,y-1);
       20,000    0    0      10,000      1,352      1,250           0          0          0        du2 = cu(xx,y-2)-cu(xx,y-1);
       20,000    0    0      10,000      1,352      1,250           0          0          0        dv2 = cv(xx,y-2)-cv(xx,y-1);
       30,000    0    0      20,000      1,352      1,250           0          0          0        dz2 = cz(xx,y-2)-cz(xx,y-1);
       20,000    0    0           0          0          0           0          0          0        hl = ch(xx,y-1)-0.5*Minmodln(dh1,dh2);
       10,000    0    0           0          0          0           0          0          0        hr = ch(xx,y-1)+0.5*Minmodln(dh1,dh2);
       10,000    0    0           0          0          0      10,000      1,350      1,250        ch2r(xx2,yy2)=hl;
       60,000    0    0      30,000          0          0      10,000      1,350      1,250        cu2r(xx2,yy2)=cu(xx,y-1)-0.5*Minmodln(du1,du2)*hr/ch(xx,y-1);
       60,000    1    1      30,000          0          0      10,000      1,350      1,250        cv2r(xx2,yy2)=cv(xx,y-1)-0.5*Minmodln(dv1,dv2)*hl/ch(xx,y-1);
       70,000    0    0      10,000          0          0      10,000      1,350      1,250        cz2r(xx2,yy2)=cz(xx,y-1)-0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      //other lines
            .    .    .           .          .          .           .          .          .      int64_t yy2l = ch2l.start();
            .    .    .           .          .          .           .          .          .      int64_t yy2r = ch2r.start()+1;
       30,256   13   13      20,082          8          2          64          6          0      for(int64_t yy = ch.start()+1; yy<ch.height()-1;yy++,yy2l++,yy2r++)
            .    .    .           .          .          .           .          .          .      {
            .    .    .           .          .          .           .          .          .        int64_t xx2l = ch2l.start();
            .    .    .           .          .          .           .          .          .        int64_t xx2r = ch2r.start();
  200,249,868    4    4  50,169,924     34,642         78      89,964          0          0        for(int64_t xx = ch.start();xx<ch.width(); xx++,xx2l++,xx2r++)
            .    .    .           .          .          .           .          .          .        {
  199,920,000    2    2 149,940,000 12,597,192  6,253,824           0          0          0          dh1 = ch(xx,yy)-ch(xx,yy+1);
  199,920,000    0    0 149,940,000 12,548,208  6,253,748           0          0          0          du1 = cu(xx,yy)-cu(xx,yy+1);
  199,920,000    2    2 149,940,000 12,548,208  6,253,748           0          0          0          dv1 = cv(xx,yy)-cv(xx,yy+1);
  199,920,000    0    0 149,940,000 12,548,208  6,253,748           0          0          0          dz1 = cz(xx,yy)-cz(xx,yy+1);
  149,940,000    2    2  99,960,000  6,295,242          0           0          0          0          dh2 = ch(xx,yy-1)-ch(xx,yy);
  149,940,000    0    0  99,960,000  6,295,242          0           0          0          0          du2 = cu(xx,yy-1)-cu(xx,yy);
  149,940,000    0    0  99,960,000  6,295,242          0           0          0          0          dv2 = cv(xx,yy-1)-cv(xx,yy);
  149,940,000    0    0  99,960,000  6,295,242          0           0          0          0          dz2 = cz(xx,yy-1)-cz(xx,yy);
   99,960,000    0    0           0          0          0           0          0          0          hl = ch(xx,yy)-0.5*Minmodln(dh1,dh2);
   49,980,000    0    0           0          0          0           0          0          0          hr = ch(xx,yy)+0.5*Minmodln(dh1,dh2);
   49,980,000    0    0           0          0          0  49,980,000  6,314,892  6,247,500          ch2r(xx2r,yy2r)=hl;
   49,980,000    0    0           0          0          0  49,980,000  6,315,360  6,247,500          ch2l(xx2l,yy2l)=hr;
  299,880,000    2    2  99,960,000          0          0  49,980,000  6,314,892  6,247,500          cu2r(xx2r,yy2r)=cu(xx,yy)-0.5*Minmodln(du1,du2)*hr/ch(xx,yy);
  199,920,000    0    0  99,960,000          0          0  49,980,000  6,312,396  6,247,500          cu2l(xx2l,yy2l)=cu(xx,yy)+0.5*Minmodln(du1,du2)*hl/ch(xx,yy);
  249,900,000    2    2  99,960,000          0          0  49,980,000  6,311,928  6,247,500          cv2r(xx2r,yy2r)=cv(xx,yy)-0.5*Minmodln(dv1,dv2)*hr/ch(xx,yy);
  199,920,000    0    0  99,960,000          0          0  49,980,000  6,312,396  6,247,500          cv2l(xx2l,yy2l)=cv(xx,yy)+0.5*Minmodln(dv1,dv2)*hl/ch(xx,yy);
  349,860,000    0    0  49,980,000          0          0  49,980,000  6,311,928  6,247,500          cz2r(xx2r,yy2r)=cz(xx,yy)-0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
   99,960,000    0    0  49,980,000          0          0  49,980,000  6,312,396  6,247,500          cz2l(xx2l,yy2l)=cz(xx,yy)+0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      //last line
            .    .    .           .          .          .           .          .          .      y = ch.height()-1;
            6    0    0           2          0          0           2          0          0      yy2 = ch2l.height()-1;
            .    .    .           .          .          .           .          .          .      xx2 = ch2l.start();
       50,060    3    3      20,024          4          4           2          0          0      for(int64_t xx = ch.start();xx<ch.width(); xx++,xx2++)
            .    .    .           .          .          .           .          .          .      {
       30,000    2    2      20,000      2,504      2,502           0          0          0        dh1 = ch(xx,y+1)-ch(xx,y+2);
       30,000    0    0      20,000      2,504      2,502           0          0          0        du1 = cu(xx,y+1)-cu(xx,y+2);
       30,000    0    0      20,000      2,504      2,502           0          0          0        dv1 = cv(xx,y+1)-cv(xx,y+2);
       30,000    0    0      20,000      2,504      2,502           0          0          0        dz1 = cz(xx,y+1)-cz(xx,y+2);
       20,000    1    1      10,000      1,250          0           0          0          0        dh2 = ch(xx,y)-ch(xx,y+1);
       20,000    0    0      10,000      1,250          0           0          0          0        du2 = cu(xx,y)-cu(xx,y+1);
       30,000    0    0      20,000      1,250          0           0          0          0        dv2 = cv(xx,y)-cv(xx,y+1);
       20,000    0    0      10,000      1,250          0           0          0          0        dz2 = cz(xx,y)-cz(xx,y+1);
       20,000    0    0           0          0          0           0          0          0        hl = ch(xx,y+1)-0.5*Minmodln(dh1,dh2);
       10,000    0    0           0          0          0           0          0          0        hr = ch(xx,y+1)+0.5*Minmodln(dh1,dh2);
       20,000    0    0      10,000          0          0      10,000      1,250      1,250        ch2l(xx2,yy2)=hr;
       60,000    0    0      30,000          0          0      10,000      1,250      1,250        cu2l(xx2,yy2)=cu(xx,y+1)+0.5*Minmodln(du1,du2)*hl/ch(xx,y+1);
       50,000    2    2      20,000          0          0      10,000      1,250      1,250        cv2l(xx2,yy2)=cv(xx,y+1)+0.5*Minmodln(dv1,dv2)*hl/ch(xx,y+1);
       70,000    0    0      10,000          0          0      10,000      1,250      1,250        cz2l(xx2,yy2)=cz(xx,y+1)+0.5*(Minmodln(dz1+dh1,dz2+dh2)-Minmodln(dh1,dh2));
            .    .    .           .          .          .           .          .          .      }
            8    2    2           4          2          0           2          2          2      delete [] hf;
            8    0    0           2          2          0           2          0          0      delete [] uf;
            8    0    0           2          0          0           2          0          0      delete [] vf;
            8    2    2           2          0          0           0          0          0      delete [] zf;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    // SCALAR dh1,dh2,du1,du2,dv1,dv2,dz1,dz2;
            .    .    .           .          .          .           .          .          .    // SCALAR hl,ul,vl,zl,hr,ur,vr,zr;
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    // SCALAR * hf= new SCALAR[4];
            .    .    .           .          .          .           .          .          .    // SCALAR * uf= new SCALAR[4];
            .    .    .           .          .          .           .          .          .    // SCALAR * vf= new SCALAR[4];
            .    .    .           .          .          .           .          .          .    // SCALAR * zf= new SCALAR[4];
-- line 468 ----------------------------------------
-- line 567 ----------------------------------------
            .    .    .           .          .          .           .          .          .    //   u2l[it_0End] = rec->get_ur();
            .    .    .           .          .          .           .          .          .    //   v2l[it_0End] = rec->get_vr();
            .    .    .           .          .          .           .          .          .    //   z2l[it_0End] = rec->get_zr();
            .    .    .           .          .          .           .          .          .    // }
            .    .    .           .          .          .           .          .          .    // delete [] hf;
            .    .    .           .          .          .           .          .          .    // delete [] uf;
            .    .    .           .          .          .           .          .          .    // delete [] vf;
            .    .    .           .          .          .           .          .          .    // delete [] zf;
           14    0    0          12          2          2           0          0          0  }
            .    .    .           .          .          .           .          .          .  END(order2_huv2_f);
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  //Heun_HQ
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            7    1    1           0          0          0           7          0          0  BEGINApplyListBlock(Heun_hq_f,inputs,SCALAR,0,outputs,SCALAR,2)
            .    .    .           .          .          .           .          .          .  //-------------------------------------------------------------------------------
            .    .    .           .          .          .           .          .          .  {
            .    .    .           .          .          .           .          .          .    TAB h(outputs[0]);
            .    .    .           .          .          .           .          .          .    TAB hs(outputs[1]);
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    TAB0 q1(inputs[0]);
            .    .    .           .          .          .           .          .          .    TAB0 q2(inputs[1]);
            .    .    .           .          .          .           .          .          .    TAB0 qs1(inputs[2]);
-- line 589 ----------------------------------------
-- line 592 ----------------------------------------
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> chsa(hs.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cqsa1(qs1.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cqsa2(qs2.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,2,false> ch(h.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cq1(q1.getDMatrix());
            .    .    .           .          .          .           .          .          .    Controller<double,0,false> cq2(q2.getDMatrix());
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .      int64_t yyq=cq1.start();
       45,021    2    2      15,002      5,001          1           3          0          0      for(int64_t yy = ch.start(); yy<ch.height();yy++,yyq++)
            .    .    .           .          .          .           .          .          .      {
            .    .    .           .          .          .           .          .          .        int64_t xxq=cq1.start();
  100,025,000    1    1           0          0          0           0          0          0        for(int64_t xx = ch.start();xx<ch.width(); xx++,xxq++)
            .    .    .           .          .          .           .          .          .        {
  100,000,000    1    1  50,000,000  6,255,000  6,255,000  25,000,000          0          0          ch(xx,yy)=0.5*(ch(xx,yy)+chsa(xx,yy));
  100,000,000    0    0  50,000,000  6,250,000  6,250,000  25,000,000          0          0          cq1(xxq,yyq)=0.5*(cq1(xxq,yyq)+cqsa1(xxq,yyq));
  100,000,000    0    0  50,000,000  6,250,000  6,250,000  25,000,000          0          0          cq2(xxq,yyq)=0.5*(cq2(xxq,yyq)+cqsa2(xxq,yyq));
            .    .    .           .          .          .           .          .          .        }
            .    .    .           .          .          .           .          .          .      }
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .    // iTAB it_2 = h.begin();
            .    .    .           .          .          .           .          .          .    // iTAB0 it_0 = q1.begin();
            .    .    .           .          .          .           .          .          .    // iTAB it_hEnd = h.end();
            .    .    .           .          .          .           .          .          .    // for(; it_2<=it_hEnd; it_2++,++it_0) {
            .    .    .           .          .          .           .          .          .    //   h[it_2] = 0.5*(h[it_2]+hs[it_2]);
            .    .    .           .          .          .           .          .          .    //   q1[it_0] = 0.5*(q1[it_0]+qs1[it_0]);
            .    .    .           .          .          .           .          .          .    //   q2[it_0] = 0.5*(q2[it_0]+qs2[it_0]);
            .    .    .           .          .          .           .          .          .    // }
            7    0    0           7          1          1           0          0          0  }
            .    .    .           .          .          .           .          .          .  END(Heun_hq_f);
            .    .    .           .          .          .           .          .          .  
            .    .    .           .          .          .           .          .          .  #endif

--------------------------------------------------------------------------------
Ir I1mr ILmr  Dr D1mr DLmr Dw D1mw DLmw 
--------------------------------------------------------------------------------
96    0    2 100  100  100 78   66   62  percentage of events annotated

