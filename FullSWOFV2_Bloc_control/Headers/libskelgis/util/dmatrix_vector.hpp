#ifndef DMATRIX_VECTOR_H
#define DMATRIX_VECTOR_H

#include <vector>

namespace skelgis{

  //-------------------------------------------------------------------------------
  template<class T,int R,bool line=true> struct DMatrix_vector
  //-------------------------------------------------------------------------------
  {
  protected :
    std::vector<DMatrix_impl<T,R>* > data;

  public:
    //-------------------------------------------------------------------------------
    DMatrix_vector(){}
    //-------------------------------------------------------------------------------
    ~DMatrix_vector(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline void push_back(DMatrix<T,R>& m){data.push_back(m.getDMatrix());}
    //-------------------------------------------------------------------------------
    inline DMatrix_impl<T,R> * operator[](int n){return data[n];}
    //-------------------------------------------------------------------------------
    inline int size(){return data.size();}
    //-------------------------------------------------------------------------------
    inline void clear(){data.clear();}
    //-------------------------------------------------------------------------------
  };
  //-------------------------------------------------------------------------------

  //-------------------------------------------------------------------------------
  template<class T,int R> struct DMatrix_vector<T,R,false>
  //-------------------------------------------------------------------------------
  {
  protected :
    std::vector<DMatrix_impl<T,R,false>* > data;

  public:
    //-------------------------------------------------------------------------------
    DMatrix_vector(){}
    //-------------------------------------------------------------------------------
    ~DMatrix_vector(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline void push_back(DMatrix<T,R,false>& m){data.push_back(m.getDMatrix());}
    //-------------------------------------------------------------------------------
    inline DMatrix_impl<T,R,false> * operator[](int n){return data[n];}
    //-------------------------------------------------------------------------------
    inline int size(){return data.size();}
    //-------------------------------------------------------------------------------
    inline void clear(){data.clear();}
    //-------------------------------------------------------------------------------
  };
  //-------------------------------------------------------------------------------

}

#endif
