#ifndef ITERATOR_H
#define ITERATOR_H

namespace skelgis{

  //-------------------------------------------------------------------------------
  template<class T,int R> struct iterator
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator(const iterator<T,R>& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator<T,R>& operator++()
    //-------------------------------------------------------------------------------
    {
      if((_rank+1)%_width<(_width-R))
	  ++_rank;
      else
	  _rank = _rank+2*R+1;

      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator<T,R>& operator++(int)
    //-------------------------------------------------------------------------------
    {
      //iterator<T,R> _tmp = *this;
      if((_rank+1)%_width<(_width-R))
	  ++_rank;
      else
	  _rank = _rank+2*R+1;
      //return _tmp;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator<T,R>& operator+=(int _d)
    //-------------------------------------------------------------------------------
    {
      if((_rank+_d)%_width<(_width-R))
	_rank = _rank + _d;
      else
	_rank = _rank+2*R+_d;

      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator<T,R>& operator--()
    //-------------------------------------------------------------------------------
    {
      if((_rank-1)%_width>(R-1))
	--_rank;
      else
	_rank = _rank - 2*R -1;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator<T,R>& operator--(int)
    //-------------------------------------------------------------------------------
    {
      iterator<T,R> _tmp = *this;
      if((_tmp._rank-1)%_tmp._width>(R-1))
	_tmp._rank;
      else
	_tmp._rank = _tmp._rank - 2*R -1;
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator<T,R>& operator-=(int _d)
    //-------------------------------------------------------------------------------
    {
      if((_rank-_d)%_width>(R-1) && (_rank-_d)%_width<_rank%_width)
	_rank = _rank - _d;
      else
	_rank = _rank - 2*R - _d;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline iterator<T,R>& operator=(iterator<T,R> right)
    //-------------------------------------------------------------------------------
    {
      _rank = right._rank;
      _width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator<T,R>& toTest) {return _rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator<T,R>& toTest) {return _rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator<T,R>& toComp) {return _rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator<T,R>& toComp) {return _rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator<T,R>& toComp) {return _rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator<T,R>& toComp) {return _rank>toComp._rank;}
    //-------------------------------------------------------------------------------
  };
  //-------------------------------------------------------------------------------

  //-------------------------------------------------------------------------------
  template<class T> struct iterator<T,0>
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator(const iterator<T,0>& it):_rank(it._rank),_width(it._width){}
    //------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline iterator<T,0>& operator++(){++_rank;return *this;}
    //-------------------------------------------------------------------------------
    inline iterator<T,0>& operator++(int){iterator<T,0> _tmp=*this;++_rank;return _tmp;}
    //-------------------------------------------------------------------------------
    iterator<T,0>& operator+=(int _d){_rank = _rank + _d;return *this;}
    //-------------------------------------------------------------------------------
    inline iterator<T,0>& operator--(){--_rank;return *this;}
    //-------------------------------------------------------------------------------
    inline iterator<T,0>& operator--(int){iterator<T,0> _tmp=*this;--_rank;return _tmp;}
    //-------------------------------------------------------------------------------
    iterator<T,0>& operator-=(int _d){_rank = _rank - _d;return *this;}
    //-------------------------------------------------------------------------------
    inline iterator<T,0>& operator=(iterator<T,0> right)
    //-------------------------------------------------------------------------------
    {
      this->_rank = right._rank;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator<T,0>& toTest) {return _rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator<T,0>& toTest) {return _rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator<T,0>& toComp) {return _rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator<T,0>& toComp) {return _rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator<T,0>& toComp) {return _rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator<T,0>& toComp) {return _rank>toComp._rank;}
  };
  //-------------------------------------------------------------------------------
}

#endif




