#ifndef ITERATOR_CONT_H
#define ITERATOR_CONT_H

namespace skelgis{

  //-------------------------------------------------------------------------------
  template<class T,int R> struct iterator_cont
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_cont():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_cont(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_cont(const iterator_cont& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_cont(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    iterator_cont& operator++()
    //-------------------------------------------------------------------------------
    {
      if((_rank+1)%_width<(_width-R))
	++_rank;
      else
	_rank = _rank+2*R+1;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    iterator_cont& operator++(int)
    //-------------------------------------------------------------------------------
    {
      iterator_cont<T,R> _tmp = *this;
      if((_rank+1)%_width<(_width-R))
	++_rank;
      else
	_rank = _rank+2*R+1;
      return _tmp;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline iterator_cont& operator=(iterator_cont right)
    //-------------------------------------------------------------------------------
    {
      _rank = right._rank;
      _width = right._width;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_cont & toTest) {return _rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_cont& toTest) {return _rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_cont& toComp) {return _rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_cont & toComp) {return _rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_cont& toComp) {return _rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_cont & toComp) {return _rank>toComp._rank;}
    //-------------------------------------------------------------------------------
  };
  //-------------------------------------------------------------------------------

  //-------------------------------------------------------------------------------
  template<class T> struct iterator_cont<T,0>
  //-------------------------------------------------------------------------------
  {
  public:
    unsigned int _rank;
    unsigned int _width;

    //-------------------------------------------------------------------------------
    iterator_cont():_rank(0),_width(0){}
    //-------------------------------------------------------------------------------
    iterator_cont(const unsigned int r,const unsigned int w):_rank(r),_width(w){}
    //-------------------------------------------------------------------------------
    iterator_cont(const iterator_cont& it):_rank(it._rank),_width(it._width){}
    //-------------------------------------------------------------------------------
    ~iterator_cont(){}
    //-------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------
    inline iterator_cont& operator++(){++_rank;return *this;}
    //-------------------------------------------------------------------------------
    inline iterator_cont& operator++(int){iterator_cont _tmp=*this;++_rank;return _tmp;}
    //-------------------------------------------------------------------------------
    inline iterator_cont& operator=(iterator_cont right)
    //-------------------------------------------------------------------------------
    {
      _rank = right._rank;
      return *this;
    }
    //-------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------
    inline bool operator==(const iterator_cont& toTest) {return _rank==toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator!=(const iterator_cont& toTest) {return _rank!=toTest._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <=(const iterator_cont& toComp) {return _rank<=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator <(const iterator_cont& toComp) {return _rank<toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >=(const iterator_cont& toComp) {return _rank>=toComp._rank;}
    //-------------------------------------------------------------------------------
    inline bool operator >(const iterator_cont& toComp) {return _rank>toComp._rank;}
  };
  //-------------------------------------------------------------------------------
}

#endif




